from PySide6.QtWidgets import (QWidget, QVBoxLayout, QGridLayout, QLabel, 
                              QGroupBox, QSlider, QSpinBox, QPushButton, QCheckBox)
from PySide6.QtCore import Qt

class SettingsTab(QWidget):
    def __init__(self, parent, gesture_thread):
        super().__init__()
        self.parent = parent
        self.gesture_thread = gesture_thread
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout()
        detection_group = QGroupBox("감지 설정")
        detection_layout = QGridLayout()
        detection_layout.addWidget(QLabel("최소 영역 크기:"), 0, 0)
        self.min_area_slider = QSlider(Qt.Orientation.Horizontal)
        self.min_area_slider.setRange(1000, 10000)
        self.min_area_slider.setValue(3000)
        self.min_area_slider.setTickPosition(QSlider.TickPosition.TicksBelow)
        self.min_area_slider.setTickInterval(1000)
        detection_layout.addWidget(self.min_area_slider, 0, 1)
        self.min_area_label = QLabel("3000")
        detection_layout.addWidget(self.min_area_label, 0, 2)
        detection_layout.addWidget(QLabel("움직임 감지 임계값:"), 1, 0)
        self.threshold_slider = QSlider(Qt.Orientation.Horizontal)
        self.threshold_slider.setRange(10, 100)
        self.threshold_slider.setValue(40)
        self.threshold_slider.setTickPosition(QSlider.TickPosition.TicksBelow)
        self.threshold_slider.setTickInterval(10)
        detection_layout.addWidget(self.threshold_slider, 1, 1)
        self.threshold_label = QLabel("40")
        detection_layout.addWidget(self.threshold_label, 1, 2)
        detection_layout.addWidget(QLabel("제스처 쿨다운 (프레임):"), 2, 0)
        self.cooldown_spin = QSpinBox()
        self.cooldown_spin.setRange(5, 50)
        self.cooldown_spin.setValue(20)
        detection_layout.addWidget(self.cooldown_spin, 2, 1, 1, 2)
        detection_layout.addWidget(QLabel("미러링:"), 3, 0)
        self.mirroring_checkbox = QCheckBox("화면 좌우 반전")
        self.mirroring_checkbox.setChecked(True)
        detection_layout.addWidget(self.mirroring_checkbox, 3, 1, 1, 2)
        self.min_area_slider.valueChanged.connect(self.update_min_area)
        self.threshold_slider.valueChanged.connect(self.update_threshold)
        detection_group.setLayout(detection_layout)
        layout.addWidget(detection_group)
        training_group = QGroupBox("학습 설정")
        training_layout = QGridLayout()
        training_layout.addWidget(QLabel("학습 프레임 수:"), 0, 0)
        self.max_frames_spin = QSpinBox()
        self.max_frames_spin.setRange(10, 100)
        self.max_frames_spin.setValue(30)
        training_layout.addWidget(self.max_frames_spin, 0, 1)
        training_group.setLayout(training_layout)
        layout.addWidget(training_group)
        apply_button = QPushButton("설정 적용")
        apply_button.clicked.connect(self.apply_settings)
        layout.addWidget(apply_button)
        layout.addStretch(1)
        self.setLayout(layout)
    
    def update_min_area(self, value):
        self.min_area_label.setText(str(value))
    
    def update_threshold(self, value):
        self.threshold_label.setText(str(value))
    
    def apply_settings(self):
        self.gesture_thread.min_area = self.min_area_slider.value()
        self.gesture_thread.threshold = self.threshold_slider.value()
        self.gesture_thread.gesture_cooldown = self.cooldown_spin.value()
        self.gesture_thread.max_recording_frames = self.max_frames_spin.value()
        self.gesture_thread.set_mirroring(self.mirroring_checkbox.isChecked())
        self.parent.log_status("설정이 적용되었습니다.")
    
    def apply_settings_from_dict(self, settings):
        if "min_area" in settings:
            self.min_area_slider.setValue(settings["min_area"])
        if "threshold" in settings:
            self.threshold_slider.setValue(settings["threshold"])
        if "cooldown" in settings:
            self.cooldown_spin.setValue(settings["cooldown"])
        if "max_frames" in settings:
            self.max_frames_spin.setValue(settings["max_frames"])
        if "mirroring" in settings:
            self.mirroring_checkbox.setChecked(settings["mirroring"])
        self.apply_settings()
